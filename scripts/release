#!/bin/bash

set -euo pipefail

# Release script for e2b-mcp
# Usage: ./scripts/release [patch|minor|major|<version>]

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get the project root directory
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
cd "$PROJECT_ROOT"

echo -e "${BLUE}üöÄ E2B MCP Release Script${NC}"
echo "üìÅ Working directory: $PROJECT_ROOT"

# Check if uv is available
if ! command -v uv &> /dev/null; then
    echo -e "${RED}‚ùå uv is not installed. Please install uv first: curl -LsSf https://astral.sh/uv/install.sh | sh${NC}"
    exit 1
fi

# Check if git is clean
if [[ -n $(git status --porcelain) ]]; then
    echo -e "${RED}‚ùå Git working directory is not clean. Please commit or stash changes first.${NC}"
    git status --short
    exit 1
fi

# Check if we're on main branch
CURRENT_BRANCH=$(git branch --show-current)
if [[ "$CURRENT_BRANCH" != "main" ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è  You are on branch '$CURRENT_BRANCH', not 'main'. Continue? (y/n)${NC}"
    read -r response
    if [[ "$response" != "y" && "$response" != "Y" ]]; then
        exit 1
    fi
fi

# Get current version from pyproject.toml
CURRENT_VERSION=$(grep -E '^version = ' pyproject.toml | sed -E 's/version = "(.*)"/\1/')
echo "üìã Current version: $CURRENT_VERSION"

# Determine new version
VERSION_TYPE=${1:-""}
if [[ -z "$VERSION_TYPE" ]]; then
    echo -e "${YELLOW}ü§î Version bump type not specified. Choose:${NC}"
    echo "  1) patch (e.g., 0.1.0 -> 0.1.1)"
    echo "  2) minor (e.g., 0.1.0 -> 0.2.0)"  
    echo "  3) major (e.g., 0.1.0 -> 1.0.0)"
    echo "  4) custom version"
    read -p "Enter choice (1-4): " choice
    
    case $choice in
        1) VERSION_TYPE="patch" ;;
        2) VERSION_TYPE="minor" ;;
        3) VERSION_TYPE="major" ;;
        4) read -p "Enter custom version: " VERSION_TYPE ;;
        *) echo -e "${RED}‚ùå Invalid choice${NC}"; exit 1 ;;
    esac
fi

# Calculate new version
if [[ "$VERSION_TYPE" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    # Custom version provided
    NEW_VERSION="$VERSION_TYPE"
else
    # Parse current version
    IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
    MAJOR=${VERSION_PARTS[0]}
    MINOR=${VERSION_PARTS[1]}
    PATCH=${VERSION_PARTS[2]}
    
    case $VERSION_TYPE in
        "patch") NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))" ;;
        "minor") NEW_VERSION="$MAJOR.$((MINOR + 1)).0" ;;
        "major") NEW_VERSION="$((MAJOR + 1)).0.0" ;;
        *) echo -e "${RED}‚ùå Invalid version type: $VERSION_TYPE${NC}"; exit 1 ;;
    esac
fi

echo -e "${GREEN}üìà Bumping version: $CURRENT_VERSION -> $NEW_VERSION${NC}"

# Confirm release
echo -e "${YELLOW}ü§î Ready to release v$NEW_VERSION? This will:${NC}"
echo "  1. Run tests"
echo "  2. Update version in pyproject.toml"
echo "  3. Create git commit and tag"
echo "  4. Build package"
echo "  5. Push to GitHub"
echo "  6. (Optional) Publish to PyPI"
read -p "Continue? (y/n): " confirm

if [[ "$confirm" != "y" && "$confirm" != "Y" ]]; then
    echo "‚ùå Release cancelled"
    exit 1
fi

# Run tests
echo -e "${BLUE}üß™ Running tests...${NC}"
uv run pytest -m "not integration" --tb=short
if [[ $? -ne 0 ]]; then
    echo -e "${RED}‚ùå Tests failed. Fix them before releasing.${NC}"
    exit 1
fi

# Run formatting
echo -e "${BLUE}üé® Running formatting...${NC}"
./scripts/format

# Update version in pyproject.toml
echo -e "${BLUE}üìù Updating version in pyproject.toml...${NC}"
if [[ "$OSTYPE" == "darwin"* ]]; then
    # macOS
    sed -i '' "s/version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" pyproject.toml
else
    # Linux
    sed -i "s/version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" pyproject.toml
fi

# Verify version update
UPDATED_VERSION=$(grep -E '^version = ' pyproject.toml | sed -E 's/version = "(.*)"/\1/')
if [[ "$UPDATED_VERSION" != "$NEW_VERSION" ]]; then
    echo -e "${RED}‚ùå Failed to update version in pyproject.toml${NC}"
    exit 1
fi

# Build package
echo -e "${BLUE}üì¶ Building package...${NC}"
uv build

# Commit and tag
echo -e "${BLUE}üè∑Ô∏è  Creating git commit and tag...${NC}"
git add pyproject.toml
git commit -m "Release v$NEW_VERSION"
git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"

echo -e "${GREEN}‚úÖ Package built and tagged successfully!${NC}"

# Ask about pushing
echo -e "${YELLOW}ü§î Push to GitHub? (y/n)${NC}"
read -r push_confirm

if [[ "$push_confirm" == "y" || "$push_confirm" == "Y" ]]; then
    echo -e "${BLUE}üì§ Pushing to GitHub...${NC}"
    git push origin "$CURRENT_BRANCH"
    git push origin "v$NEW_VERSION"
    echo -e "${GREEN}‚úÖ Pushed to GitHub!${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Skipped GitHub push. Don't forget to push manually:${NC}"
    echo "  git push origin $CURRENT_BRANCH"
    echo "  git push origin v$NEW_VERSION"
fi

# Ask about PyPI publishing
echo -e "${YELLOW}ü§î Publish to PyPI? (y/n)${NC}"
read -r pypi_confirm

if [[ "$pypi_confirm" == "y" || "$pypi_confirm" == "Y" ]]; then
    echo -e "${BLUE}üì¶ Publishing to PyPI...${NC}"
    echo -e "${YELLOW}üí° Make sure you have PyPI credentials configured${NC}"
    
    # Check if twine is available
    if ! command -v twine &> /dev/null; then
        echo "Installing twine..."
        uv add --dev twine
    fi
    
    uv run twine upload dist/*
    
    if [[ $? -eq 0 ]]; then
        echo -e "${GREEN}‚úÖ Published to PyPI!${NC}"
        echo -e "${GREEN}üéâ Release v$NEW_VERSION complete!${NC}"
        echo "üì¶ Package: https://pypi.org/project/e2b-mcp/$NEW_VERSION/"
    else
        echo -e "${RED}‚ùå Failed to publish to PyPI${NC}"
        exit 1
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Skipped PyPI publishing.${NC}"
    echo -e "${GREEN}üéâ Release v$NEW_VERSION ready!${NC}"
    echo -e "${BLUE}üí° To publish to PyPI later:${NC}"
    echo "  uv run twine upload dist/*"
fi

echo ""
echo -e "${GREEN}üéä Release Summary:${NC}"
echo "  üìã Version: $CURRENT_VERSION -> $NEW_VERSION"
echo "  üè∑Ô∏è  Tag: v$NEW_VERSION"
echo "  üì¶ Built: dist/e2b_mcp-$NEW_VERSION*"
if [[ "$push_confirm" == "y" || "$push_confirm" == "Y" ]]; then
    echo "  üîó GitHub: Pushed"
fi
if [[ "$pypi_confirm" == "y" || "$pypi_confirm" == "Y" ]]; then
    echo "  üì¶ PyPI: Published"
fi 